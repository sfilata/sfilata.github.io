(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{189:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"es6-项目实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#es6-项目实战","aria-hidden":"true"}},[t._v("#")]),t._v(" ES6 项目实战")]),t._v(" "),s("p",[t._v("相关文章：[[ES6 规范详解]]")]),t._v(" "),s("h2",{attrs:{id:"课程目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程目标","aria-hidden":"true"}},[t._v("#")]),t._v(" 课程目标")]),t._v(" "),s("h3",{attrs:{id:"框架搭建与业务实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架搭建与业务实战","aria-hidden":"true"}},[t._v("#")]),t._v(" 框架搭建与业务实战")]),t._v(" "),s("ul",[s("li",[t._v("Babel 简介")]),t._v(" "),s("li",[t._v("ES6 语义转换以及原理")]),t._v(" "),s("li",[t._v("ES6 实战")])]),t._v(" "),s("h2",{attrs:{id:"知识要点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#知识要点","aria-hidden":"true"}},[t._v("#")]),t._v(" 知识要点")]),t._v(" "),s("p",[t._v("Babel 用于将高版本的 JS 语法翻译成低版本的 JS 代码，以便在老版本的浏览器中运行")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph LR\n  ES6--\x3ebabel\n  babel--\x3eES5\n  ES5--\x3ebrowser\n")])])]),s("p",[t._v("可以通过 babel 对一些新语法进行转义，查看转换后的代码可以很好的帮助我们理解新语法的用法和实现。")]),t._v(" "),s("h3",{attrs:{id:"babel-转义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babel-转义","aria-hidden":"true"}},[t._v("#")]),t._v(" Babel 转义")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("babel source.js -o dist.js\n")])])]),s("p",[t._v("将 source.js 转义成低版本并作为 dist.js 进行输出")]),t._v(" "),s("h3",{attrs:{id:"ast-抽象语法树生成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ast-抽象语法树生成","aria-hidden":"true"}},[t._v("#")]),t._v(" AST 抽象语法树生成")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph LR\n  code--词法分析--\x3eAST\n  AST--语法分析--\x3erun[Runable Code]\n")])])]),s("p",[t._v("词法分析就是将书写的代码转成语法树，而语法分析是把语法树转译成真正可以运行的代码")]),t._v(" "),s("blockquote",[s("p",[t._v("Unexpected Token '..'\nToken 为 AST 概念里的令牌流，报此错误是因为没有能识别到一个有效的关键字")])]),t._v(" "),s("h3",{attrs:{id:"如何编写一个-babel-的插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何编写一个-babel-的插件","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何编写一个 Babel 的插件")]),t._v(" "),s("p",[t._v("本质上就是一个函数，具体形式为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// plugin.js")]),t._v("\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    visitor"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Identifier")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("path")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _nodeName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" _nodeType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("node"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" transfromSync "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@babel/core'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" plugin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./plugin.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("function a () {};")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  plugin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./index.js'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" output "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("transfromSync")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"利用-es6-的知识实现简单的-tree-组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用-es6-的知识实现简单的-tree-组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 利用 ES6 的知识实现简单的 Tree 组件")]),t._v(" "),s("p",[t._v("实现之前针对要实现的功能进行具体分析，接下来的代码以 Tree 组件为例进行分析。")]),t._v(" "),s("ul",[s("li",[t._v("Tree 主体文件，外层逻辑，接收传参，统一事件管理")]),t._v(" "),s("li",[t._v("Node 节点部分。具体显示，考虑 level 缩进, expand 展开逻辑, check 逻辑")])]),t._v(" "),s("p",[t._v("实现时注意可采用面向对象的实现思想以及视图和逻辑的分离。")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph LR\n  component--\x3etree\n  component--\x3edata\n  tree--\x3elogic\n  logic--\x3edescCommon[管理整个实例的逻辑#例如寻找某个节点#]\n  tree--\x3eview\n  data--\x3edesc[树形结构, 有利于渲染]\n  data--\x3edisadvantage[没有办法很好的即时找到某个节点]\n  disadvantage--\x3esolution[采用工厂方式创建节点,添加id]\n")])])]),s("blockquote",[s("p",[t._v("可利用 webAssemble 进行纯逻辑运算来进行优化。")])]),t._v(" "),s("h2",{attrs:{id:"补充知识点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#补充知识点","aria-hidden":"true"}},[t._v("#")]),t._v(" 补充知识点")]),t._v(" "),s("h3",{attrs:{id:"如果给你一段代码，例如-count-3-怎么解析为语法树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如果给你一段代码，例如-count-3-怎么解析为语法树","aria-hidden":"true"}},[t._v("#")]),t._v(" 如果给你一段代码，例如 count = 3, 怎么解析为语法树?")]),t._v(" "),s("p",[t._v("先找到关键字或者运算符的位置，根据其具体类型找到其左值和右值。依据查找到的关键值的类型进行特定类型树的构建。")]),t._v(" "),s("h3",{attrs:{id:"微内核和微前端"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微内核和微前端","aria-hidden":"true"}},[t._v("#")]),t._v(" 微内核和微前端")]),t._v(" "),s("p",[t._v("微内核指的是一种架构模式，例如 Babel core。内核只实现了基座以及一些最基本的功能，别的功能以插件的方式进行封装，这样可以保证内核代码的简洁和纯净，同时使插件相对独立。")]),t._v(" "),s("p",[t._v("微前端则主要解决的是跨端，跨技术栈的问题。每个部分都是独立的服务，组件即服务，可以采用完全不同的技术方案。最终组合起来的结果相对完整统一即可。")])])}],!1,null,null,null);a.default=e.exports}}]);